{"version":3,"sources":["authController.js"],"names":["asyncHandler","require","AppError","User","jwt","createToken","exports","signup","req","res","next","create","name","body","email","password","passwordConfirm","user","token","_id","status","json","data","login","findOne","correctPassword"],"mappings":";;AAAA,IAAMA,YAAY,GAAGC,OAAO,CAAC,uBAAD,CAA5B;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAxB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAMG,GAAG,GAAGH,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAMI,WAAW,GAAGJ,OAAO,CAAC,sBAAD,CAA3B;;AACAK,OAAO,CAACC,MAAR,GAAiBP,YAAY,CAAC,iBAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACPP,IAAI,CAACQ,MAAL,CAAY;AAC/BC,YAAAA,IAAI,EAAEJ,GAAG,CAACK,IAAJ,CAASD,IADgB;AAE/BE,YAAAA,KAAK,EAAEN,GAAG,CAACK,IAAJ,CAASC,KAFe;AAG/BC,YAAAA,QAAQ,EAAEP,GAAG,CAACK,IAAJ,CAASE,QAHY;AAI/BC,YAAAA,eAAe,EAAER,GAAG,CAACK,IAAJ,CAASG;AAJK,WAAZ,CADO;;AAAA;AACpBC,UAAAA,IADoB;AAOpBC,UAAAA,KAPoB,GAOZb,WAAW,CAACY,IAAI,CAACE,GAAN,EAAUX,GAAV,EAAeC,GAAf,CAPC;AAQ1BA,UAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBD,YAAAA,MAAM,EAAE,SADS;AAEjBF,YAAAA,KAAK,EAALA,KAFiB;AAGjBI,YAAAA,IAAI,EAAEL;AAHW,WAArB;;AAR0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAA7B;AAcAX,OAAO,CAACiB,KAAR,GAAgBvB,YAAY,CAAC,kBAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACGF,GAAG,CAACK,IADP,EACjBC,KADiB,aACjBA,KADiB,EACVC,QADU,aACVA,QADU;;AAEzB,cAAI,CAACD,KAAD,IAAU,CAACC,QAAf,EAAyB;AACrBL,YAAAA,IAAI,CAAC,IAAIR,QAAJ,CAAa,sCAAb,EAAqD,GAArD,CAAD,CAAJ;AACH;;AAJwB;AAAA,0CAKNC,IAAI,CAACqB,OAAL,CAAa;AAAEV,YAAAA,KAAK,EAALA;AAAF,WAAb,CALM;;AAAA;AAKnBG,UAAAA,IALmB;AAAA,yBAMrB,CAACA,IANoB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,0CAMJA,IAAI,CAACQ,eAAL,CAAqBV,QAArB,EAA8BE,IAAI,CAACF,QAAnC,CANI;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOpBL,UAAAA,IAAI,CAAC,IAAIR,QAAJ,CAAa,8BAAb,EAA6C,GAA7C,CAAD,CAAJ;;AAPoB;AASnBgB,UAAAA,KATmB,GASXb,WAAW,CAACY,IAAI,CAACE,GAAN,EAAUX,GAAV,EAAeC,GAAf,CATA;AAUzBA,UAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBD,YAAAA,MAAM,EAAE,SADS;AAEjBF,YAAAA,KAAK,EAALA;AAFiB,WAArB;;AAVyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAA5B","sourcesContent":["const asyncHandler = require('express-async-handler');\r\nconst AppError = require('../utils/AppError');\r\nconst User = require('../models/user');\r\nconst jwt = require('jsonwebtoken');\r\nconst createToken = require('../utils/createToken');\r\nexports.signup = asyncHandler(async (req, res, next) => {\r\n    const user = await User.create({\r\n    name: req.body.name,\r\n    email: req.body.email,\r\n    password: req.body.password,\r\n    passwordConfirm: req.body.passwordConfirm,\r\n    });\r\n    const token = createToken(user._id,req, res);\r\n    res.status(201).json({\r\n        status: 'success',\r\n        token,\r\n        data: user,\r\n  });\r\n})\r\nexports.login = asyncHandler(async (req, res, next) => {\r\n    const { email, password } = req.body;\r\n    if (!email || !password) {\r\n        next(new AppError(\" you should enter email and password\", 400));\r\n    }\r\n    const user = await User.findOne({ email });\r\n    if (!user || !(await user.correctPassword(password,user.password))) {\r\n         next(new AppError(\" Incorrect email or password\", 401));\r\n    }\r\n    const token = createToken(user._id,req, res);\r\n    res.status(200).json({\r\n        status: \"success\",\r\n        token\r\n    })\r\n\r\n})"],"file":"authController.dev.js"}