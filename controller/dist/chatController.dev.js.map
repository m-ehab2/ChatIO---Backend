{"version":3,"sources":["chatController.js"],"names":["asyncHandler","require","Chat","User","AppError","exports","accessChat","req","res","next","console","log","userId","body","find","$and","users","$elemMatch","$eq","user","_id","populate","chatData","path","select","length","status","json","data","newChat","chatName","isGroupChat","create","createChat","findOne","fullChat","fetchChats","sort","updatedAt","then","results","chats","createGroup","JSON","parse","push","name","groupAdmin","chatGroup","group","renameGroup","chatId","findByIdAndUpdate","runValidators","addUserToGroup","$push","chat","deleteUserFromGroup","$pull"],"mappings":"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","sourcesContent":["\r\nconst asyncHandler = require('express-async-handler');\r\nconst Chat = require('../models/chat');\r\nconst User = require('../models/user');\r\nconst AppError = require('../utils/AppError');\r\nexports.accessChat = asyncHandler(async (req, res, next) => {\r\n    console.log(\"in chat\")\r\n    const { userId } = req.body;\r\n    let chatData = await Chat.find({\r\n        $and: [\r\n            { users: { $elemMatch: { $eq: req.user._id } } },\r\n            { users: { $elemMatch: { $eq: userId } } },\r\n        ]\r\n    }).populate(\"users\", \"-password\").populate('message');\r\n    chatData = await User.populate(chatData, {\r\n        path: 'message.sender',\r\n        select:'name image email'\r\n    })\r\n    if (chatData.length>0) {      \r\n        res.status(200).json({\r\n            status: \"success\",\r\n            data:chatData[0]\r\n        })\r\n    } else {\r\n        var newChat = {\r\n            users: [req.user._id, userId],\r\n            chatName: \"sender\",\r\n            isGroupChat:false\r\n        }\r\n        const createChat = await Chat.create(newChat);\r\n\r\n        const fullChat = await Chat.findOne({ _id: createChat._id })\r\n            .populate(\"users\", \"-password\");\r\n        if (!fullChat) {\r\n            throw new AppError(\"the chat not exist\",400)\r\n        }\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data:fullChat\r\n        })\r\n    }\r\n})\r\nexports.fetchChats = asyncHandler(async (req, res, next) => {\r\n         await Chat.find({ users: { $elemMatch: { $eq: req.user._id } } })\r\n        .populate('users', \"-password\")\r\n        .populate('groupAdmin', '-password')\r\n        .populate('message')\r\n        .sort({ updatedAt: -1 }).\r\n        then(async(results) => {\r\n            results=await User.populate(results, {\r\n                path: 'message.sender',\r\n                select:'name image email'\r\n            })\r\n            res.status(200).json({\r\n                status: \"success\",\r\n                data:results\r\n            })\r\n        })\r\n    next(new AppError('not found any chats for that user',400))\r\n    console.log(chats)\r\n\r\n})\r\nexports.createGroup = asyncHandler(async (req, res, next) => {\r\n    const users = JSON.parse(req.body.users);\r\n    console.log(users);\r\n    if (users.length < 2) {\r\n        return res.status(400).json({\r\n            status: 'Group should be more than 2',\r\n        })\r\n    }\r\n    users.push(req.user);\r\n        const chatGroup = await Chat.create({\r\n        chatName: req.body.name,\r\n        users,\r\n            isGroupChat: true,\r\n        groupAdmin:req.user\r\n        })\r\n    const group = await Chat.findOne({ _id: chatGroup._id })\r\n        .populate('users', '-password')\r\n        .populate('groupAdmin','-password')\r\n\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:group\r\n    })\r\n})\r\nexports.renameGroup = asyncHandler(async (req, res, next) => {\r\n    const { chatId, chatName } = req.body;\r\n    if (!chatId || !chatName) {\r\n        next(new AppError(\"you should provide chatId and chatName \",400))\r\n    }\r\n    const newChat = await Chat.findByIdAndUpdate(chatId,{\r\n        chatName\r\n    }, {\r\n        new: true,\r\n        runValidators:true\r\n    }).populate('users','-password').populate('groupAdmin','-password');\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:newChat\r\n    })\r\n})\r\nexports.addUserToGroup = asyncHandler(async (req, res, next) => {\r\n    const { chatId, userId } = req.body;\r\n    const chat = await Chat.findByIdAndUpdate(chatId, {\r\n        $push: { users: userId }\r\n    }, {\r\n        runValidators: true,\r\n        new: true\r\n    }).populate('users','-password').populate('groupAdmin','-password');\r\n    if (!chat) {\r\n        next(new AppError(\"chatId or userId not found\",400));\r\n    }\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:chat\r\n    })\r\n})\r\nexports.deleteUserFromGroup = asyncHandler(async (req, res, next) => {\r\n    const { chatId, userId } = req.body;\r\n    const chat = await Chat.findByIdAndUpdate(chatId, {\r\n        $pull: { users: userId }\r\n    }, {\r\n        runValidators: true,\r\n        new: true\r\n    }).populate('users','-password').populate('groupAdmin','-password');\r\n    if (!chat) {\r\n        next(new AppError(\"chatId or userId not found\",400));\r\n    }\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:chat\r\n    })\r\n})\r\n"],"file":"chatController.dev.js"}