{"version":3,"sources":["chatController.js"],"names":["asyncHandler","require","User","Chat","exports","accessChat","req","res","userId","chatData","newChat","createChat","fullChat","regeneratorRuntime","async","_context","prev","next","body","awrap","find","$and","$eq","user","users","$elemMatch","populate","AppError","sent","path","console","length","status","json","_id","chatName","findOne","data","stop","fetchChats","_context3","sort","updatedAt","then","results","_context2"],"mappings":"aACA,IAAMA,aAAeC,QAAQ,yBAAvBD,KAAAA,QAAeC,kBAEfC,KAAOD,QAAQ,kBADfE,SAAOF,QAAQ,qBAGrBG,QAAQC,WAAaL,aAAa,SAAOM,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAF5Bf,QAAOD,IAAAA,WAIDO,EAAWF,EAAIY,KAAfV,OAFsBO,EAAAE,KAAA,EAAAJ,mBAAAM,MADThB,KAAAiB,KAAA,CAKjBC,KAAM,CAJNhB,CAAAA,MAAaL,CAAAA,WAAa,CAAAsB,IAAAhB,EAAAiB,KAAOjB,OAAP,CAAAkB,MAAA,CAAAC,WAAA,CAAAH,IAAAd,QAAAkB,SAAA,QAAA,aAAAA,SAAA,YAAA,KAAA,EAAA,OAD5BC,EAC4BZ,EAAAa,KAAAb,EAAAE,KAAA,EAAAJ,mBAAAM,MAAAjB,KAAAwB,SAAAjB,EAAA,CAAAoB,KAAA,iBAC9BC,OAAAA,sBAD8B,KAAA,EAAA,KAAA,GAAArB,EAAAM,EAAAa,MAAAG,QAAA,CAAAhB,EAAAE,KAAA,GAAA,MAAAV,EAAAyB,OAAA,KAAAC,KAAA,CAI1BZ,OACI,UAAEG,KAAAA,EAAO,KALaT,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAKCP,EAAA,CAAdc,MAAA,CAAAlB,EAAAiB,KAAAW,IAAA1B,GAAT2B,SACA,SAAEX,aAAO,GANaT,EAAAE,KAAA,GAAAJ,mBAAAM,MAMQX,KAAAA,OAAAA,IANR,KAAA,GAAA,OAMGc,EANHP,EAAAa,KAAAb,EAAAE,KAAA,GAAAJ,mBAAAM,MAMbhB,KAAAiC,QAAA,CAAAF,IAAAvB,EAAAuB,MAFPR,SAAA,QAAA,cAJoB,KAAA,GAAA,GAMbd,EANaG,EAAAa,KAAA,CAAAb,EAAAE,KAAA,GAAA,MAAA,MA6BhB,IAAIU,SAAS,qBAAqB,KA7BlB,KAAA,GAG1BlB,EAAAA,OAH0B,KAAAwB,KAAA,CAAAD,OAAA,UAAAK,KAAAzB,IAAA,KAAA,GAAA,IAAA,MAAA,OAAAG,EAAAuB,YAqClClC,QAAQmC,WAAavC,aAAa,SAAOM,EAAKC,EAAKU,GAAjB,OAAAJ,mBAAAC,MAAA,SAAA0B,GAAA,OAAA,OAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,KAAA,EAAA,OAAAuB,EAAAvB,KAAA,EAAAJ,mBAAAM,MArCAhB,KAAAiB,KAAA,CAAAI,MAAA,CAAAC,WAAA,CAAAH,IAAAhB,EAAAiB,KAAAW,QAS9BzB,SAT8B,QAAA,aAwCzBiB,SAAS,aAAc,aAxCEA,SAa1BjB,WAb0BgC,KAAA,CAAAC,WAAA,IAAAC,KAAA,SAAAC,GAAA,OAAA/B,mBAAAC,MAAA,SAAA+B,GAAA,OAAA,OAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,KAAA,EAAA,OAAA4B,EAAA5B,KAAA,EAAAJ,mBAAAM,MAAAjB,KAAAwB,SAAAkB,EAAA,CA6ClBf,KAAM,iBA/BVG,OAAO,sBAde,KAAA,EAAAY,EAAAC,EAAAjB,KAgBtBS,EAAIL,OAACvB,KAAQwB,KAAA,CAFjBD,OAAA,UAd0BK,KAAAO,IAAA,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAP,aAqCA,KAAA,EArCArB,EAAA,IAAAU,SAAA,oCAAA,MAmBtBjB,QAAAA,IAAAA,OAkBsB,KAAA,EAAA,IAAA,MAAA,OAAA8B,EAAAF","file":"chatController.min.js","sourcesContent":["\r\nconst asyncHandler = require('express-async-handler');\r\nconst Chat = require('../models/chat');\r\nconst User = require('../models/user');\r\nconst AppError = require('../utils/AppError');\r\nexports.accessChat = asyncHandler(async (req, res, next) => {\r\n    console.log(\"in chat\")\r\n    const { userId } = req.body;\r\n    let chatData = await Chat.find({\r\n        $and: [\r\n            { users: { $elemMatch: { $eq: req.user._id } } },\r\n            { users: { $elemMatch: { $eq: userId } } },\r\n        ]\r\n    }).populate(\"users\", \"-password\").populate('message');\r\n    chatData = await User.populate(chatData, {\r\n        path: 'message.sender',\r\n        select:'name image email'\r\n    })\r\n    if (chatData.length>0) {      \r\n        res.status(200).json({\r\n            status: \"success\",\r\n            data:chatData[0]\r\n        })\r\n    } else {\r\n        var newChat = {\r\n            users: [req.user._id, userId],\r\n            chatName: \"sender\",\r\n            isGroupChat:false\r\n        }\r\n        const createChat = await Chat.create(newChat);\r\n\r\n        const fullChat = await Chat.findOne({ _id: createChat._id })\r\n            .populate(\"users\", \"-password\");\r\n        if (!fullChat) {\r\n            throw new AppError(\"the chat not exist\",400)\r\n        }\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data:fullChat\r\n        })\r\n    }\r\n})\r\nexports.fetchChats = asyncHandler(async (req, res, next) => {\r\n         await Chat.find({ users: { $elemMatch: { $eq: req.user._id } } })\r\n        .populate('users', \"-password\")\r\n        .populate('groupAdmin', '-password')\r\n        .populate('message')\r\n        .sort({ updatedAt: -1 }).\r\n        then(async(results) => {\r\n            results=await User.populate(results, {\r\n                path: 'message.sender',\r\n                select:'name image email'\r\n            })\r\n            res.status(200).json({\r\n                status: \"success\",\r\n                data:results\r\n            })\r\n        })\r\n    next(new AppError('not found any chats for that user',400))\r\n    console.log(chats)\r\n\r\n})\r\n"]}