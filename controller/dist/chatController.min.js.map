{"version":3,"sources":["chatController.js"],"names":["asyncHandler","require","User","Chat","exports","accessChat","req","res","userId","chatData","newChat","createChat","fullChat","regeneratorRuntime","async","_context","prev","next","body","awrap","find","$and","$eq","user","users","$elemMatch","populate","AppError","sent","path","console","length","status","json","_id","chatName","findOne","data","stop","fetchChats","_context3","sort","updatedAt","then","results","_context2","isGroupChat","chatGroup","group","_context4","JSON","parse","log","abrupt","push","name","_req$body","chatId","_context5","findByIdAndUpdate","new","runValidators","addUserToGroup","_req$body2","chat","_context6","_req$body3","_context7","select","$pull"],"mappings":"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","file":"chatController.min.js","sourcesContent":["\r\nconst asyncHandler = require('express-async-handler');\r\nconst Chat = require('../models/chat');\r\nconst User = require('../models/user');\r\nconst AppError = require('../utils/AppError');\r\nexports.accessChat = asyncHandler(async (req, res, next) => {\r\n    console.log(\"in chat\")\r\n    const { userId } = req.body;\r\n    let chatData = await Chat.find({\r\n        $and: [\r\n            { users: { $elemMatch: { $eq: req.user._id } } },\r\n            { users: { $elemMatch: { $eq: userId } } },\r\n        ]\r\n    }).populate(\"users\", \"-password\").populate('message');\r\n    chatData = await User.populate(chatData, {\r\n        path: 'message.sender',\r\n        select:'name image email'\r\n    })\r\n    if (chatData.length>0) {      \r\n        res.status(200).json({\r\n            status: \"success\",\r\n            data:chatData[0]\r\n        })\r\n    } else {\r\n        var newChat = {\r\n            users: [req.user._id, userId],\r\n            chatName: \"sender\",\r\n            isGroupChat:false\r\n        }\r\n        const createChat = await Chat.create(newChat);\r\n\r\n        const fullChat = await Chat.findOne({ _id: createChat._id })\r\n            .populate(\"users\", \"-password\");\r\n        if (!fullChat) {\r\n            throw new AppError(\"the chat not exist\",400)\r\n        }\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data:fullChat\r\n        })\r\n    }\r\n})\r\nexports.fetchChats = asyncHandler(async (req, res, next) => {\r\n         await Chat.find({ users: { $elemMatch: { $eq: req.user._id } } })\r\n        .populate('users', \"-password\")\r\n        .populate('groupAdmin', '-password')\r\n        .populate('message')\r\n        .sort({ updatedAt: -1 }).\r\n        then(async(results) => {\r\n            results=await User.populate(results, {\r\n                path: 'message.sender',\r\n                select:'name image email'\r\n            })\r\n            res.status(200).json({\r\n                status: \"success\",\r\n                data:results\r\n            })\r\n        })\r\n    next(new AppError('not found any chats for that user',400))\r\n    console.log(chats)\r\n\r\n})\r\nexports.createGroup = asyncHandler(async (req, res, next) => {\r\n    const users = JSON.parse(req.body.users);\r\n    console.log(users);\r\n    if (users.length < 2) {\r\n        return res.status(400).json({\r\n            status: 'Group should be more than 2',\r\n        })\r\n    }\r\n    users.push(req.user);\r\n        const chatGroup = await Chat.create({\r\n        chatName: req.body.name,\r\n        users,\r\n            isGroupChat: true,\r\n        groupAdmin:req.user\r\n        })\r\n    const group = await Chat.findOne({ _id: chatGroup._id })\r\n        .populate('users', '-password')\r\n        .populate('groupAdmin','-password')\r\n\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:group\r\n    })\r\n})\r\nexports.renameGroup = asyncHandler(async (req, res, next) => {\r\n    const { chatId, chatName } = req.body;\r\n    if (!chatId || !chatName) {\r\n        next(new AppError(\"you should provide chatId and chatName \",400))\r\n    }\r\n    const newChat = await Chat.findByIdAndUpdate(chatId,{\r\n        chatName\r\n    }, {\r\n        new: true,\r\n        runValidators:true\r\n    }).populate('users','-password').populate('groupAdmin','-password');\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:newChat\r\n    })\r\n})\r\nexports.addUserToGroup = asyncHandler(async (req, res, next) => {\r\n    const { chatId, userId } = req.body;\r\n    const chat = await Chat.findByIdAndUpdate(chatId, {\r\n        $push: { users: userId }\r\n    }, {\r\n        runValidators: true,\r\n        new: true\r\n    }).populate('users','-password').populate('groupAdmin','-password');\r\n    if (!chat) {\r\n        next(new AppError(\"chatId or userId not found\",400));\r\n    }\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:chat\r\n    })\r\n})\r\nexports.deleteUserFromGroup = asyncHandler(async (req, res, next) => {\r\n    const { chatId, userId } = req.body;\r\n    const chat = await Chat.findByIdAndUpdate(chatId, {\r\n        $pull: { users: userId }\r\n    }, {\r\n        runValidators: true,\r\n        new: true\r\n    }).populate('users','-password').populate('groupAdmin','-password');\r\n    if (!chat) {\r\n        next(new AppError(\"chatId or userId not found\",400));\r\n    }\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:chat\r\n    })\r\n})\r\n"]}