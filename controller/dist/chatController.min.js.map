{"version":3,"sources":["chatController.js"],"names":["asyncHandler","require","User","Chat","exports","accessChat","req","res","userId","chatData","newChat","createChat","fullChat","regeneratorRuntime","async","_context","prev","next","body","awrap","find","AppError","users","$elemMatch","$eq","user","_id","populate","sent","path","select","length","status","json","$and","chatName","findOne","data","stop","fetchChats","_context3","sort","updatedAt","then","results","_context2","isGroupChat","chatGroup","group","_context4","JSON","parse","console","log","abrupt","push","name","_req$body","chatId","_context5","findByIdAndUpdate","new","runValidators","addUserToGroup","_req$body2","chat","_context6","_req$body3","_context7","$pull"],"mappings":"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","file":"chatController.min.js","sourcesContent":["\r\nconst asyncHandler = require('express-async-handler');\r\nconst Chat = require('../models/chat');\r\nconst User = require('../models/user');\r\nconst AppError = require('../utils/AppError');\r\nexports.accessChat = asyncHandler(async (req, res, next) => {\r\n    const { userId } = req.body;\r\n    let chatData = await Chat.find({\r\n        $and: [\r\n            { users: { $elemMatch: { $eq: req.user._id } } },\r\n            { users: { $elemMatch: { $eq: userId } } },\r\n        ]\r\n    }).populate(\"users\", \"-password\").populate('message');\r\n    chatData = await User.populate(chatData, {\r\n        path: 'message.sender',\r\n        select:'name image email'\r\n    })\r\n    if (chatData.length>0) {      \r\n        res.status(200).json({\r\n            status: \"success\",\r\n            data:chatData[0]\r\n        })\r\n    } else {\r\n        var newChat = {\r\n            users: [req.user._id, userId],\r\n            chatName: \"sender\",\r\n            isGroupChat:false\r\n        }\r\n        const createChat = await Chat.create(newChat);\r\n\r\n        const fullChat = await Chat.findOne({ _id: createChat._id })\r\n            .populate(\"users\", \"-password\");\r\n        if (!fullChat) {\r\n            throw new AppError(\"the chat not exist\",400)\r\n        }\r\n        res.status(201).json({\r\n            status: \"success\",\r\n            data:fullChat\r\n        })\r\n    }\r\n})\r\nexports.fetchChats = asyncHandler(async (req, res, next) => {\r\n         await Chat.find({ users: { $elemMatch: { $eq: req.user._id } } })\r\n        .populate('users', \"-password\")\r\n        .populate('groupAdmin', '-password')\r\n        .populate('message')\r\n        .sort({ updatedAt: -1 }).\r\n        then(async(results) => {\r\n            results=await User.populate(results, {\r\n                path: 'message.sender',\r\n                select:'name image email'\r\n            })\r\n            res.status(200).json({\r\n                status: \"success\",\r\n                data:results\r\n            })\r\n        })\r\n    next(new AppError('not found any chats for that user',400))\r\n    console.log(chats)\r\n\r\n})\r\nexports.createGroup = asyncHandler(async (req, res, next) => {\r\n    const users = JSON.parse(req.body.users);\r\n    console.log(users);\r\n    if (users.length < 2) {\r\n        return res.status(400).json({\r\n            status: 'Group should be more than 2',\r\n        })\r\n    }\r\n    users.push(req.user);\r\n        const chatGroup = await Chat.create({\r\n        chatName: req.body.name,\r\n        users,\r\n            isGroupChat: true,\r\n        groupAdmin:req.user\r\n        })\r\n    const group = await Chat.findOne({ _id: chatGroup._id })\r\n        .populate('users', '-password')\r\n        .populate('groupAdmin','-password')\r\n\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:group\r\n    })\r\n})\r\nexports.renameGroup = asyncHandler(async (req, res, next) => {\r\n    const { chatId, chatName } = req.body;\r\n    if (!chatId || !chatName) {\r\n        next(new AppError(\"you should provide chatId and chatName \",400))\r\n    }\r\n    const newChat = await Chat.findByIdAndUpdate(chatId,{\r\n        chatName\r\n    }, {\r\n        new: true,\r\n        runValidators:true\r\n    }).populate('users','-password').populate('groupAdmin','-password');\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:newChat\r\n    })\r\n})\r\nexports.addUserToGroup = asyncHandler(async (req, res, next) => {\r\n    const { chatId, userId } = req.body;\r\n    const chat = await Chat.findByIdAndUpdate(chatId, {\r\n        $push: { users: userId }\r\n    }, {\r\n        runValidators: true,\r\n        new: true\r\n    }).populate('users','-password').populate('groupAdmin','-password');\r\n    if (!chat) {\r\n        next(new AppError(\"chatId or userId not found\",400));\r\n    }\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:chat\r\n    })\r\n})\r\nexports.deleteUserFromGroup = asyncHandler(async (req, res, next) => {\r\n    const { chatId, userId } = req.body;\r\n    const chat = await Chat.findByIdAndUpdate(chatId, {\r\n        $pull: { users: userId }\r\n    }, {\r\n        runValidators: true,\r\n        new: true\r\n    }).populate('users','-password').populate('groupAdmin','-password');\r\n    if (!chat) {\r\n        next(new AppError(\"chatId or userId not found\",400));\r\n    }\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:chat\r\n    })\r\n})\r\n"]}