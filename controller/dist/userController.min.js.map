{"version":3,"sources":["userController.js"],"names":["User","require","asyncHandler","mongoose","exports","getUsers","req","res","users","regeneratorRuntime","async","_context","prev","next","awrap","find","AppError","sent","status","json","result","length","stop","getOneUser","id","user","_context2","params","Types","ObjectId","isValid","abrupt","findById","data","createUser","_context3","create","name","body","email","password","passwordConfirm","updateUser","newUser","_context4","findByIdAndUpdate","runValidators","new","deleteUser","_context5","findByIdAndDelete","message"],"mappings":"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","file":"userController.min.js","sourcesContent":["const User = require(\"../models/user\");\r\nconst asyncHandler = require('express-async-handler');\r\nconst AppError=require('../utils/AppError');\r\nconst mongoose = require(\"mongoose\");\r\n    \r\nexports.getUsers = asyncHandler(async (req, res, next) => {\r\n    const users = await User.find();\r\n    res.status(200).json({\r\n        status: \"success\",\r\n        result: users.length,\r\n        data:users\r\n    })\r\n})\r\nexports.getOneUser =asyncHandler(async (req, res, next) => {\r\n    const id = req.params.id;\r\n    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n        return next(new AppError(\"Invalid user ID format\", 400));\r\n    }\r\n    const user = await User.findById(id);\r\n    if (!user) {\r\n        return next(new AppError(\"user not found\",404))\r\n    }\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:user\r\n    })\r\n})\r\nexports.createUser =asyncHandler( async (req,res,next) => {\r\n    const user = await User.create({\r\n    name: req.body.name,\r\n    email: req.body.email,\r\n    password: req.body.password,\r\n    passwordConfirm: req.body.passwordConfirm,\r\n    });\r\n    res.status(201).json({\r\n    status: 'success',\r\n    data: user,\r\n  });\r\n})\r\nexports.updateUser =asyncHandler( async(req, res, next) => {\r\n    const id = req.params.id;\r\n    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n        return next(new AppError(\"Invalid user ID format\", 400));\r\n    }\r\n    const user = await User.findById(id);\r\n    if (!user) {\r\n        return next(new AppError(\"user not found\",404))\r\n    }\r\n    const newUser = await User.findByIdAndUpdate(id, req.body, {\r\n        runValidators: true,\r\n        new:true\r\n    })\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:newUser\r\n    })\r\n})\r\nexports.deleteUser = asyncHandler(async (req,res,next) => {\r\n    const id = req.params.id;\r\n    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n        return next(new AppError(\"Invalid user ID format\", 400));\r\n    }\r\n    const user = await User.findByIdAndDelete(id);\r\n    if (!user) {\r\n        return next(new AppError(\"user not found\",404))\r\n\r\n    }\r\n    return res.status(200).json({\r\n            status: \"succes\",\r\n            message:\"user is deleted\"\r\n        })\r\n})"]}