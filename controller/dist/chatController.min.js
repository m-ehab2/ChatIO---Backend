"use strict";var asyncHandler=require("express-async-handler"),Chat=require("../models/chat"),User=require("../models/user"),AppError=require("../utils/AppError");exports.accessChat=asyncHandler(function(r,s){var t,a,n,u,o;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return console.log("in chat"),t=r.body.userId,e.next=4,regeneratorRuntime.awrap(Chat.find({$and:[{users:{$elemMatch:{$eq:r.user._id}}},{users:{$elemMatch:{$eq:t}}}]}).populate("users","-password").populate("message"));case 4:return a=e.sent,e.next=7,regeneratorRuntime.awrap(User.populate(a,{path:"message.sender",select:"name image email"}));case 7:if(!(0<(a=e.sent).length)){e.next=12;break}s.status(200).json({status:"success",data:a[0]}),e.next=22;break;case 12:return n={users:[r.user._id,t],chatName:"sender",isGroupChat:!1},e.next=15,regeneratorRuntime.awrap(Chat.create(n));case 15:return u=e.sent,e.next=18,regeneratorRuntime.awrap(Chat.findOne({_id:u._id}).populate("users","-password"));case 18:if(o=e.sent){e.next=21;break}throw new AppError("the chat not exist",400);case 21:s.status(201).json({status:"success",data:o});case 22:case"end":return e.stop()}})}),exports.fetchChats=asyncHandler(function(r,s,t){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(Chat.find({users:{$elemMatch:{$eq:r.user._id}}}).populate("users","-password").populate("groupAdmin","-password").populate("message").sort({updatedAt:-1}).then(function(r){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(User.populate(r,{path:"message.sender",select:"name image email"}));case 2:r=e.sent,s.status(200).json({status:"success",data:r});case 4:case"end":return e.stop()}})}));case 2:t(new AppError("not found any chats for that user",400)),console.log(chats);case 4:case"end":return e.stop()}})});
//# sourceMappingURL=chatController.min.js.map
