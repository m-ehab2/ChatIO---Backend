{"version":3,"sources":["userController.js"],"names":["User","require","asyncHandler","AppError","mongoose","exports","getUsers","req","res","next","search","query","$or","name","$regex","$options","email","find","_id","$ne","user","users","status","json","result","length","data","getOneUser","id","params","Types","ObjectId","isValid","findById","createUser","create","body","password","passwordConfirm","updateUser","findByIdAndUpdate","runValidators","newUser","deleteUser","findByIdAndDelete","message"],"mappings":"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","sourcesContent":["const User = require(\"../models/user\");\r\nconst asyncHandler = require('express-async-handler');\r\nconst AppError=require('../utils/AppError');\r\nconst mongoose = require(\"mongoose\");\r\n    \r\nexports.getUsers = asyncHandler(async (req, res, next) => {\r\n    const search = req.query.search ? {\r\n        $or:[\r\n            { name: { $regex: req.query.search, $options: 'i' } },\r\n            { email: { $regex: req.query.search, $options: 'i' } }\r\n        ],\r\n    }: {};\r\n\r\n    const users = await User.find(search).find({_id:{$ne:req.user._id}});\r\n    res.status(200).json({\r\n        status: \"success\",\r\n        result: users.length,\r\n        data:users\r\n    })\r\n})\r\nexports.getOneUser =asyncHandler(async (req, res, next) => {\r\n    const id = req.params.id;\r\n    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n        return next(new AppError(\"Invalid user ID format\", 400));\r\n    }\r\n    const user = await User.findById(id);\r\n    if (!user) {\r\n        return next(new AppError(\"user not found\",404))\r\n    }\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:user\r\n    })\r\n})\r\nexports.createUser =asyncHandler( async (req,res,next) => {\r\n    const user = await User.create({\r\n    name: req.body.name,\r\n    email: req.body.email,\r\n    password: req.body.password,\r\n    passwordConfirm: req.body.passwordConfirm,\r\n    });\r\n    res.status(201).json({\r\n    status: 'success',\r\n    data: user,\r\n  });\r\n})\r\nexports.updateUser =asyncHandler( async(req, res, next) => {\r\n    const id = req.params.id;\r\n    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n        return next(new AppError(\"Invalid user ID format\", 400));\r\n    }\r\n    const user = await User.findById(id);\r\n    if (!user) {\r\n        return next(new AppError(\"user not found\",404))\r\n    }\r\n    const newUser = await User.findByIdAndUpdate(id, req.body, {\r\n        runValidators: true,\r\n        new:true\r\n    })\r\n    res.status(200).json({\r\n        status: 'success',\r\n        data:newUser\r\n    })\r\n})\r\nexports.deleteUser = asyncHandler(async (req,res,next) => {\r\n    const id = req.params.id;\r\n    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n        return next(new AppError(\"Invalid user ID format\", 400));\r\n    }\r\n    const user = await User.findByIdAndDelete(id);\r\n    if (!user) {\r\n        return next(new AppError(\"user not found\",404))\r\n\r\n    }\r\n    return res.status(200).json({\r\n            status: \"success\",\r\n            message:\"user is deleted\"\r\n        })\r\n})"],"file":"userController.dev.js"}