{"version":3,"sources":["ErrorHandler.js"],"names":["AppError","require","err","req","res","ErrorHandler","console","log","status","statusCode","json","message","errorMessage","Object","values","errors","map","val","join","name","code","duplicateKey","keys","originalUrl","keyValue","concat"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,qBAAnBD,aAAWC,SAAOC,EAACC,EAAAC,GAEnBC,GACFC,QAAQC,IAAI,SAASL,GADnBG,aAAeL,SAEbE,OADJI,QAAYC,IAAAL,GAGRI,QAAQC,IAAIP,UAFTI,EAAAI,OAAYR,EAAnBS,YAA6BC,KAAA,CACjBH,OAAR,OACQA,QAAIP,EAAZW,UAGIA,GAAaA,oBAAbA,EAAAA,KAAaA,CAFjBL,QAAAC,IAAAL,GAIH,IAAAU,EAAAC,OAAAC,OAAAZ,EAAAa,QAAAC,IAAA,SAAAC,GAAA,OAAAA,EAAAN,UAAAO,KAAA,MAIG,OAAOd,EAAII,OAAO,KAAKE,KAAK,CAHxBS,OAAS,OACLZ,QAARK,IACsD,GAAtD,qBAAuEM,EAAKC,MAA5E,OAAAjB,EAAAkB,KAMJ,MAAiB,sBAAblB,EAAIiB,KACEE,EAAAA,OAAeR,KAAOS,KAAKpB,CAC1BE,OAAII,OACDG,QADkB,wCAI/B,sBAAAT,EAAAiB,KAQUf,EAAII,OAAO,KAAKE,KAAK,CAPxBS,OAAS,OACNf,QAAA,2CAIV,MAAAF,EAAAM,OASUJ,EAAII,OAAO,KAAKE,KAAK,CARxBS,OAAS,OACNf,QAAII,eAAAA,OAAiBL,EAAAoB,YAAjBf,sBAKfJ,EAAAI,OAAA,KAAAE,KAAA,CASIF,OAAQ,QACRG,QAAS,2BAlCT,IAAUU,EAAaX,OAAKY,KAAApB,EAAAsB,UAAA,GACxBhB,OAAQJ,EAAAI,OADgB,KAAAE,KAAA,CAExBC,OAASC,OAFbD,QAAA,OAAAc,OAAAJ,EAAA,yBA4BIV,OAAAA,QAAON","file":"ErrorHandler.min.js","sourcesContent":["const AppError = require(\"../utils/AppError\");\r\n\r\nconst ErrorHandler = (err, req, res, next) => {\r\n    console.log(\"error \",err)\r\n    if (err instanceof AppError) {\r\n        console.log(err)\r\n        console.log(AppError)\r\n        return res.status(err.statusCode).json({\r\n            status: 'fail',\r\n            message: err.message,\r\n        });\r\n    }\r\n    if (err.name === 'ValidationError') {\r\n        console.log(err)\r\n        const errorMessage = Object.values(err.errors).map(val => val.message).join(', ');\r\n        return res.status(400).json({\r\n            status: 'fail',\r\n            message: errorMessage,\r\n        });\r\n    }\r\n    if (err.name === 'MongoServerError' && err.code === 11000) {\r\n        const duplicateKey = Object.keys(err.keyValue)[0];\r\n        return res.status(400).json({\r\n            status: 'fail',\r\n            message: `The ${duplicateKey} is already taken.`,\r\n        });\r\n    }\r\n    if (err.name === \"JsonWebTokenError\") {\r\n        return res.status(401).json({\r\n            status: 'fail',\r\n            message: \"Invalid token. Please log in again.\",\r\n        });\r\n    }\r\n    if (err.name === 'TokenExpiredError') {\r\n        return res.status(401).json({\r\n            status: 'fail',\r\n            message: \"Token is expired. Please log in again.\",\r\n        });\r\n    }\r\n    // Handle route not found error\r\n    if (err.status === 404) {\r\n        return res.status(404).json({\r\n            status: 'fail',\r\n            message: `Cannot find ${req.originalUrl} on this server.`,\r\n        });\r\n    }\r\n    // Handle other unexpected errors\r\n    return res.status(500).json({\r\n        status: 'error',\r\n        message: 'Internal server error.',\r\n    });\r\n};\r\n\r\nmodule.exports = ErrorHandler;\r\n"]}