{"version":3,"sources":["ErrorHandler.js"],"names":["AppError","require","err","req","res","console","ErrorHandler","log","status","statusCode","json","message","name","errorMessage","Object","values","errors","map","val","join","code","duplicateKey","concat","originalUrl","keys","keyValue","module","exports"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,qBAAnBD,aAAWC,SAAOC,EAACC,EAAAC,GAGrB,GAAIF,aAAeF,SACfK,OAFFC,QAAYC,IAAGL,GACbA,QAAGK,IAAAP,UACHI,EAAAI,OAAAN,EAAAO,YAAAC,KAAA,CACQH,OAAIP,OACLI,QAAAF,EAAcS,UAAkB,GAAvC,oBAAAT,EAAAU,KAAA,CAIHP,QAAAE,IAAAL,GAGG,IAAMW,EAAeC,OAAOC,OAAOb,EAAIc,QAAQC,IAAI,SAAAC,GAAG,OAAIA,EAAIP,UAASQ,KAAK,MAF5EjB,OAAAE,EAAaI,OAAA,KAAAE,KAAjB,CACYH,OAAR,OACMM,QAAYA,IAClB,GAAO,qBAAPX,EAAOE,MAAqB,OAAAF,EAAAkB,KAM5B,MAAkB,sBAAZC,EAAAA,KACKb,EAAAA,OAAJ,KAAAE,KAAqB,CAClBF,OADkB,OAExBG,QAAO,wCASE,sBAAbT,EAAIU,KANJR,EAAaI,OAAA,KAAAE,KAAA,CACNN,OAAII,OACDG,QADkB,2CAYb,MAAfT,EAAIM,OAPJJ,EAAaI,OAAA,KAAAE,KAAA,CACNN,OAAII,OACDG,QAAE,eAAAW,OADgBnB,EAAAoB,YAChB,sBAYTnB,EAAII,OAAO,KAAKE,KAAK,CACxBF,OAAQ,QARRN,QAAA,2BAxBIM,IAAQa,EADgBP,OAAAU,KAAAtB,EAAAuB,UAAA,GAExBd,OAASE,EAAAA,OAAAA,KAAAA,KAAAA,CAFbL,OAAA,OAIHG,QAAA,OAAAW,OAAAD,EAAA,yBAsB+BK,OAA5BC,QAAArB","file":"ErrorHandler.min.js","sourcesContent":["const AppError = require(\"../utils/AppError\");\r\n\r\nconst ErrorHandler = (err, req, res, next) => {\r\n    if (err instanceof AppError) {\r\n        console.log(err)\r\n        console.log(AppError)\r\n        return res.status(err.statusCode).json({\r\n            status: 'fail',\r\n            message: err.message,\r\n        });\r\n    }\r\n    if (err.name === 'ValidationError') {\r\n        console.log(err)\r\n        const errorMessage = Object.values(err.errors).map(val => val.message).join(', ');\r\n        return res.status(400).json({\r\n            status: 'fail',\r\n            message: errorMessage,\r\n        });\r\n    }\r\n    if (err.name === 'MongoServerError' && err.code === 11000) {\r\n        const duplicateKey = Object.keys(err.keyValue)[0];\r\n        return res.status(400).json({\r\n            status: 'fail',\r\n            message: `The ${duplicateKey} is already taken.`,\r\n        });\r\n    }\r\n    if (err.name === \"JsonWebTokenError\") {\r\n        return res.status(401).json({\r\n            status: 'fail',\r\n            message: \"Invalid token. Please log in again.\",\r\n        });\r\n    }\r\n    if (err.name === 'TokenExpiredError') {\r\n        return res.status(401).json({\r\n            status: 'fail',\r\n            message: \"Token is expired. Please log in again.\",\r\n        });\r\n    }\r\n    // Handle route not found error\r\n    if (err.status === 404) {\r\n        return res.status(404).json({\r\n            status: 'fail',\r\n            message: `Cannot find ${req.originalUrl} on this server.`,\r\n        });\r\n    }\r\n    // Handle other unexpected errors\r\n    return res.status(500).json({\r\n        status: 'error',\r\n        message: 'Internal server error.',\r\n    });\r\n};\r\n\r\nmodule.exports = ErrorHandler;\r\n"]}