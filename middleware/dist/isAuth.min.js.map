{"version":3,"sources":["isAuth.js"],"names":["asyncHandler","require","AppError","promisify","isAuth","req","res","next","token","decoded","user","regeneratorRuntime","async","_context","prev","headers","authorization","startsWith","split","awrap","jwt","verify","process","env","SECRET_KEY","sent","User","findById","id","changedPasswordAfter","iat","abrupt","stop","module","exports"],"mappings":"aAAA,IAAMA,aAAeC,QAAQ,yBACvBC,SAAWD,QAAQ,qBADnBD,IAAAA,QAAY,yBAGAC,QAAQ,QAAnBE,mBAAAA,UAFDD,KAAQD,QAAGA,kBAIXG,OAAQJ,aAAc,SAAOK,EAAKC,EAAKC,GAAjB,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAN,MAAA,KAAA,EAAA,OAEpBF,EAAIU,QAAQC,eAAiBX,EAAIU,QAAQC,cAAcC,WAAW,YACjET,EALSP,EAAAA,QAAOe,cAKkBE,MAAM,KAAK,IAJ5CV,GAQFD,EAAK,IAAIL,SAAS,uCAAuC,MAPrCW,EAAAN,KAAA,EAAAI,mBAAAQ,MAAAhB,UAAAiB,IAAAC,OAAAlB,CAAAK,EAAAc,QAAAC,IAAAC,aAAA,KAAA,EAAA,OAAAf,EAAAI,EAAAY,KAAAZ,EAAAN,KAAA,EAAAI,mBAAAQ,MAAAO,KAAAC,SAAAlB,EAAAmB,KAAA,KAAA,EAAA,IAAAlB,EAAAG,EAAAY,OAAAlB,EAAA,IAAAL,SAAA,yBAAA,MAExBQ,EAAAmB,qBAAgBb,EAAZc,KAFoB,OAAAjB,EAAAkB,OAAA,SAGnBvB,EACJ,IAAAN,SAaW,2EAXPM,OANmBK,EAAAN,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAK,KAAAA,EAAAH,IAAA,KAAA,GAAA,IAAA,MAAA,OAAAM,EAAAmB,YAAAC,OAAAC,QAAA9B","file":"isAuth.min.js","sourcesContent":["const asyncHandler = require('express-async-handler');\r\nconst AppError = require('../utils/AppError');\r\nconst jwt=require('jsonwebtoken')\r\nconst {promisify}=require('util');\r\nconst User = require('../models/user');\r\nconst isAuth =asyncHandler( async (req, res, next) => {\r\n    let token \r\n    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n         token = req.headers.authorization.split(' ')[1];\r\n    }\r\n    \r\n    if (!token) {\r\n        next(new AppError(\" you are not logged in :please login\",401))\r\n    }\r\n    const decoded = await promisify(jwt.verify)(token, process.env.SECRET_KEY)\r\n    const user = await User.findById(decoded.id);\r\n    if (!user) {\r\n        next(new AppError(\" the user is not exist\",401))\r\n    }\r\n    if (user.changedPasswordAfter(decoded.iat)) {\r\n        return next(\r\n            new AppError(\r\n                'User Belong To This Token Recently Changed Password! Please Log In Again',\r\n                401\r\n            )\r\n        );\r\n    }\r\n        req.user = user;\r\n    next()\r\n})\r\nmodule.exports=isAuth"]}