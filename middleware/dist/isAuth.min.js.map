{"version":3,"sources":["isAuth.js"],"names":["asyncHandler","require","AppError","promisify","getUsers","jwt","req","res","next","token","decoded","user","regeneratorRuntime","async","_context","prev","authorization","headers","startsWith","split","cookies","isAuth","awrap","verify","process","env","SECRET_KEY","sent","User","findById","userId","changedPasswordAfter","iat","abrupt","console","log","stop","module","exports"],"mappings":"aAAA,IAAMA,aAAeC,QAAQ,yBACvBC,SAAWD,QAAQ,qBADnBD,IAAAA,QAAY,yBAGAC,QAAQ,QAAnBE,mBAAAA,UAFDD,KAAQD,QAAGA,4BAIIA,QAAQ,gCAArBG,mBAAAA,SAHFC,OAAIJ,aAAQ,SAAlBK,EAAAC,EAAAC,GAAkB,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAN,MAAA,KAAA,EAAA,OACXL,EAAAA,QAMaa,eAAiBV,EAAIW,QAAQD,cAAcE,WAAW,UACjET,EAAQH,EAAIW,QAAQD,cAAcG,MAAM,KAAK,GAEzCb,EAAIc,QAAQf,MACjBI,EARaR,EAAAA,QAAQI,KACvBgB,GAAsBb,EAAA,IAAAN,SAAA,uCAAA,MAJVY,EAAAN,KAAA,EAAAI,mBAAAU,MAIUnB,UAAAE,IAAAkB,OAAApB,CAAAM,EAAAe,QAAAC,IAAAC,aAJV,KAAA,EAAA,OAIUhB,EAJVI,EAAAa,KAAAb,EAAAN,KAAA,EAAAI,mBAAAU,MAIUM,KAAAC,SAAAnB,EAAAoB,SAJV,KAAA,EAAA,IAIUnB,EAJVG,EAAAa,OAOdnB,EAAA,IAAON,SAASc,yBAAqBC,MAEpCN,EAFDoB,qBAGqB1B,EAAK2B,KAVZ,OAAAlB,EAAAmB,OAAA,SAWVxB,EACH,IAAAP,SAaW,2EAXPO,OAdSK,EAAAN,KAAA,GAAA,MAAA,KAAA,GAIU0B,QAAAC,IAAA,WAAAD,QAAAC,IAAAxB,GA4BpBL,EAAIK,KAAOA,EA5BSH,IAJV,KAAA,GAAA,IAAA,MAAA,OAAAM,EAAAsB,YAIUC,OAAAC,QAAAjB","file":"isAuth.min.js","sourcesContent":["const asyncHandler = require('express-async-handler');\r\nconst AppError = require('../utils/AppError');\r\nconst jwt=require('jsonwebtoken')\r\nconst {promisify}=require('util');\r\nconst User = require('../models/user');\r\nconst { getUsers } = require('../controller/userController');\r\nconst isAuth = asyncHandler(async (req, res, next) => {\r\n    \r\n    let token \r\n    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n         token = req.headers.authorization.split(' ')[1];\r\n    }\r\n    else if (req.cookies.jwt) {\r\n        token = req.cookies.jwt;\r\n    }\r\n    \r\n    if (!token) {\r\n        next(new AppError(\" you are not logged in :please login\",401))\r\n    }\r\n    const decoded = await promisify(jwt.verify)(token, process.env.SECRET_KEY)\r\n    const user = await User.findById(decoded.userId);\r\n    if (!user) {\r\n        next(new AppError(\" the user is not exist\",401))\r\n    }\r\n    if (user.changedPasswordAfter(decoded.iat)) {\r\n        return next(\r\n            new AppError(\r\n                'User Belong To This Token Recently Changed Password! Please Log In Again',\r\n                401\r\n            )\r\n        );\r\n    }\r\n    console.log(\"ekdhsdj\")\r\n    console.log(user)\r\n        req.user = user;\r\n    next()\r\n})\r\nmodule.exports=isAuth"]}