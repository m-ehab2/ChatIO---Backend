{"version":3,"sources":["isAuth.js"],"names":["asyncHandler","require","AppError","jwt","promisify","User","getUsers","isAuth","req","res","next","console","log","headers","authorization","startsWith","token","split","verify","process","env","SECRET_KEY","decoded","findById","userId","user","changedPasswordAfter","iat","module","exports"],"mappings":";;AAAA,IAAMA,YAAY,GAAGC,OAAO,CAAC,uBAAD,CAA5B;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAxB;;AACA,IAAME,GAAG,GAACF,OAAO,CAAC,cAAD,CAAjB;;eACkBA,OAAO,CAAC,MAAD,C;IAAlBG,S,YAAAA,S;;AACP,IAAMC,IAAI,GAAGJ,OAAO,CAAC,gBAAD,CAApB;;gBACqBA,OAAO,CAAC,8BAAD,C;IAApBK,Q,aAAAA,Q;;AACR,IAAMC,MAAM,GAAGP,YAAY,CAAC,iBAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBC,UAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,OAAJ,CAAYC,aAAxB;;AAEA,cAAIN,GAAG,CAACK,OAAJ,CAAYC,aAAZ,IAA6BN,GAAG,CAACK,OAAJ,CAAYC,aAAZ,CAA0BC,UAA1B,CAAqC,QAArC,CAAjC,EAAiF;AAC5EC,YAAAA,KAAK,GAAGR,GAAG,CAACK,OAAJ,CAAYC,aAAZ,CAA0BG,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAR;AACJ;;AAED,cAAI,CAACD,KAAL,EAAY;AACRN,YAAAA,IAAI,CAAC,IAAIR,QAAJ,CAAa,sCAAb,EAAoD,GAApD,CAAD,CAAJ;AACH;;AAVuB;AAAA,0CAWFE,SAAS,CAACD,GAAG,CAACe,MAAL,CAAT,CAAsBF,KAAtB,EAA6BG,OAAO,CAACC,GAAR,CAAYC,UAAzC,CAXE;;AAAA;AAWlBC,UAAAA,OAXkB;AAAA;AAAA,0CAYLjB,IAAI,CAACkB,QAAL,CAAcD,OAAO,CAACE,MAAtB,CAZK;;AAAA;AAYlBC,UAAAA,IAZkB;;AAaxB,cAAI,CAACA,IAAL,EAAW;AACPf,YAAAA,IAAI,CAAC,IAAIR,QAAJ,CAAa,wBAAb,EAAsC,GAAtC,CAAD,CAAJ;AACH;;AAfuB,eAgBpBuB,IAAI,CAACC,oBAAL,CAA0BJ,OAAO,CAACK,GAAlC,CAhBoB;AAAA;AAAA;AAAA;;AAAA,2CAiBbjB,IAAI,CACP,IAAIR,QAAJ,CACI,0EADJ,EAEI,GAFJ,CADO,CAjBS;;AAAA;AAwBxBS,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYa,IAAZ;AACIjB,UAAAA,GAAG,CAACiB,IAAJ,GAAWA,IAAX;AACJf,UAAAA,IAAI;;AA3BoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAA3B;AA6BAkB,MAAM,CAACC,OAAP,GAAetB,MAAf","sourcesContent":["const asyncHandler = require('express-async-handler');\r\nconst AppError = require('../utils/AppError');\r\nconst jwt=require('jsonwebtoken')\r\nconst {promisify}=require('util');\r\nconst User = require('../models/user');\r\nconst { getUsers } = require('../controller/userController');\r\nconst isAuth = asyncHandler(async (req, res, next) => {\r\n    console.log(\"i\")\r\n    console.log(req.headers.authorization)\r\n    let token \r\n    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n         token = req.headers.authorization.split(' ')[1];\r\n    }\r\n    \r\n    if (!token) {\r\n        next(new AppError(\" you are not logged in :please login\",401))\r\n    }\r\n    const decoded = await promisify(jwt.verify)(token, process.env.SECRET_KEY)\r\n    const user = await User.findById(decoded.userId);\r\n    if (!user) {\r\n        next(new AppError(\" the user is not exist\",401))\r\n    }\r\n    if (user.changedPasswordAfter(decoded.iat)) {\r\n        return next(\r\n            new AppError(\r\n                'User Belong To This Token Recently Changed Password! Please Log In Again',\r\n                401\r\n            )\r\n        );\r\n    }\r\n    console.log(\"ekdhsdj\")\r\n    console.log(user)\r\n        req.user = user;\r\n    next()\r\n})\r\nmodule.exports=isAuth"],"file":"isAuth.dev.js"}