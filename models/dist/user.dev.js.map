{"version":3,"sources":["user.js"],"names":["validator","require","mongoose","bcrypt","UserSchema","Schema","name","type","String","required","email","validate","isEmail","password","minlength","passwordConfirm","val","message","image","passwordChangedAt","Date","timestamps","pre","next","isModified","hash","undefined","methods","correctPassword","userPassword","compare","changedPasswordAfter","JWTTimeStamp","timePasswordChanged","parseInt","getTime","User","model","module","exports"],"mappings":";;AAAI,IAAMA,SAAS,GAACC,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMG,UAAU,GAAG,IAAIF,QAAQ,CAACG,MAAb,CAAoB;AACnCC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAEC,MADJ;AAEFC,IAAAA,QAAQ,EAAC,CAAC,IAAD,EAAM,wBAAN;AAFP,GAD6B;AAKnCC,EAAAA,KAAK,EAAC;AACFH,IAAAA,IAAI,EAACC,MADH;AAEFC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,yBAAP,CAFR;AAGFE,IAAAA,QAAQ,EAAC,CAACX,SAAS,CAACY,OAAX,EAAmB,4BAAnB;AAHP,GAL6B;AAUnCC,EAAAA,QAAQ,EAAE;AACNN,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,uBAAP,CAFJ;AAGNK,IAAAA,SAAS,EAAC,CAAC,CAAD,EAAG,yCAAH;AAHJ,GAVyB;AAenCC,EAAAA,eAAe,EAAC;AACZR,IAAAA,IAAI,EAAEC,MADM;AAEZC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,8BAAP,CAFE;AAGZE,IAAAA,QAAQ,EAAE;AACVX,MAAAA,SAAS,EAAE,mBAAUgB,GAAV,EAAe;AACd,eAAOA,GAAG,IAAI,KAAKH,QAAnB;AACH,OAHC;AAIEI,MAAAA,OAAO,EAAC;AAJV;AAHE,GAfmB;AAyBnCC,EAAAA,KAAK,EAAE;AACHX,IAAAA,IAAI,EAAEC,MADH;AAEH,eAAQ;AAFL,GAzB4B;AA8BnCW,EAAAA,iBAAiB,EAAEC;AA9BgB,CAApB,EA+BhB;AACCC,EAAAA,UAAU,EAAE;AADb,CA/BgB,CAAnB;AAkCAjB,UAAU,CAACkB,GAAX,CAAe,MAAf,EAAuB,iBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,cAClB,KAAKC,UAAL,CAAgB,UAAhB,CADkB;AAAA;AAAA;AAAA;;AAAA,2CACkBD,IAAI,EADtB;;AAAA;AAAA;AAAA,0CAEGpB,MAAM,CAACsB,IAAP,CAAY,KAAKZ,QAAjB,EAA2B,EAA3B,CAFH;;AAAA;AAEnB,eAAKA,QAFc;AAGnB,eAAKE,eAAL,GAAuBW,SAAvB;AACAH,UAAAA,IAAI;;AAJe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAMAnB,UAAU,CAACuB,OAAX,CAAmBC,eAAnB,GAAoC,kBAAOf,QAAP,EAAgBgB,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACnB1B,MAAM,CAAC2B,OAAP,CAAejB,QAAf,EAAwBgB,YAAxB,CADmB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApC;;AAGAzB,UAAU,CAACuB,OAAX,CAAmBI,oBAAnB,GAA0C,UAAUC,YAAV,EAAwB;AACpE,MAAI,KAAKb,iBAAT,EAA4B;AAC1B,QAAMc,mBAAmB,GAAGC,QAAQ,CAClC,KAAKf,iBAAL,CAAuBgB,OAAvB,KAAmC,IADD,EAElC,EAFkC,CAApC;AAIA,WAAOH,YAAY,GAAGC,mBAAtB;AACD;;AACD,SAAO,KAAP;AACD,CATG;;AAUA,IAAMG,IAAI,GAAGlC,QAAQ,CAACmC,KAAT,CAAe,MAAf,EAAuBjC,UAAvB,CAAb;AACAkC,MAAM,CAACC,OAAP,GAAeH,IAAf","sourcesContent":["    const validator=require('validator')\r\n    const mongoose = require('mongoose');\r\n    const bcrypt = require('bcryptjs'); \r\n    const UserSchema = new mongoose.Schema({\r\n        name: {\r\n            type: String,\r\n            required:[true,\"please enter your name\"]\r\n        },\r\n        email:{\r\n            type:String,\r\n            required: [true, \"please enter your email\"],\r\n            validate:[validator.isEmail,'Please Enter a Valid Email']\r\n        },\r\n        password: {\r\n            type: String,\r\n            required: [true, 'please enter Password'],\r\n            minlength:[8,\"please enter more than or equal 8 chars\"]\r\n        },\r\n        passwordConfirm:{\r\n            type: String,\r\n            required: [true, 'please confirm your password'],\r\n            validate: {\r\n            validator: function (val) {\r\n                        return val == this.password;\r\n                    },\r\n                        message:\"the password not the same\"       \r\n            }\r\n        },\r\n        image: {\r\n            type: String,\r\n            default:'https://yourteachingmentor.com/wp-content/uploads/2020/12/istockphoto-1223671392-612x612-1.jpg'\r\n        }\r\n        ,\r\n        passwordChangedAt: Date,\r\n    }, {\r\n        timestamps: true,\r\n    })\r\n    UserSchema.pre('save', async function (next) {\r\n    if (!this.isModified('password')) return next();\r\n        this.password = await bcrypt.hash(this.password, 12);\r\n        this.passwordConfirm = undefined;\r\n        next();\r\n    })\r\n    UserSchema.methods.correctPassword =async (password,userPassword) => {\r\n        return await bcrypt.compare(password,userPassword)    \r\n    }\r\n    UserSchema.methods.changedPasswordAfter = function (JWTTimeStamp) {\r\n  if (this.passwordChangedAt) {\r\n    const timePasswordChanged = parseInt(\r\n      this.passwordChangedAt.getTime() / 1000,\r\n      10\r\n    );\r\n    return JWTTimeStamp < timePasswordChanged;\r\n  }\r\n  return false;\r\n};\r\n    const User = mongoose.model('User', UserSchema);\r\n    module.exports=User"],"file":"user.dev.js"}