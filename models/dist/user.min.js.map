{"version":3,"sources":["user.js"],"names":["validator","require","mongoose","UserSchema","Schema","type","String","required","validate","isEmail","password","minlength","val","this","message","image","passwordChangedAt","Date","timestamps","isModified","next","bcrypt","hash","passwordConfirm","undefined","methods","correctPassword","userPassword","regeneratorRuntime","async","_context2","prev","awrap","compare","abrupt","sent","stop","JWTTimeStamp","parseInt","getTime","User","model","module","exports"],"mappings":"aAAI,IAAMA,UAAUC,QAAQ,aAClBC,SAAWD,QAAQ,YADnBD,OAAUC,QAAQ,YAGlBE,WAAa,IAAID,SAASE,OAAO,CAFjCF,KAAQ,CAING,KAAMC,OAHFC,SAAW,EAAA,EAAA,2BACjBJ,MAAU,CACNE,KAAAC,OACIA,SADJ,EAAA,EAAA,2BAEME,SAAO,CAAAR,UAAAS,QAAA,+BAEdC,SAAC,CACGJ,KADHA,OAEMC,SAAS,EAAA,EAAA,yBACTI,UAAEX,CAAAA,EAAUS,4CAExBC,gBAAU,CACAJ,KADAA,OAEEC,SAAS,EAAA,EAAA,gCACjBI,SAAa,CAbkBX,UAAA,SAAAY,GAenB,OAAAA,GAAAC,KAAAH,UAEKI,QAAA,8BAGLC,MAAOH,CAFTP,KAAAC,OAIEQ,QAAQ,kGAGnBE,kBAAEC,MACHZ,CACAa,YAAQ,IAGZF,WAAAA,IAAiB,OAAEC,SAAAA,GAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,GACpBJ,KAAAM,WAAA,YADoBF,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SACpBG,KADoBH,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAEPI,OAAAC,KAAAT,KAAAH,SAAA,KAFOO,KAAAA,EAEnBC,KAAUR,SAFSO,EAAAA,KA9BvBJ,KAAAU,qBAAAC,EAkCArB,IAJuBc,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,QAIAd,WAAAsB,QAAAC,gBAAA,SAAAhB,EAAAiB,GAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAV,MAAA,KAAA,EAAA,OAAAU,EAAAV,KAAA,EAAAQ,mBAAAI,MAAAX,OAAAY,QAAAvB,EAAAiB,IAAA,KAAA,EAAA,OAAAG,EAAAI,OAAA,SAAAJ,EAAAK,MAAA,KAAA,EAAA,IAAA,MAAA,OAAAL,EAAAM,WAAAjC,WAClBsB,QAAKN,qBADa,SAAAkB,GAAA,QAAAxB,KAAAG,mBAehBqB,EAfgBC,SAAAzB,KAAAG,kBAAAuB,UAAA,IAarB,KAMF,IAAMC,KAAOtC,SAASuC,MAAM,OAAQtC,YAnBbuC,OAAAC,QAAAH","file":"user.min.js","sourcesContent":["    const validator=require('validator')\r\n    const mongoose = require('mongoose');\r\n    const bcrypt = require('bcryptjs'); \r\n    const UserSchema = new mongoose.Schema({\r\n        name: {\r\n            type: String,\r\n            required:[true,\"please enter your name\"]\r\n        },\r\n        email:{\r\n            type:String,\r\n            required: [true, \"please enter your email\"],\r\n            validate:[validator.isEmail,'Please Enter a Valid Email']\r\n        },\r\n        password: {\r\n            type: String,\r\n            required: [true, 'please enter Password'],\r\n            minlength:[8,\"please enter more than or equal 8 chars\"]\r\n        },\r\n        passwordConfirm:{\r\n            type: String,\r\n            required: [true, 'please confirm your password'],\r\n            validate: {\r\n            validator: function (val) {\r\n                        return val == this.password;\r\n                    },\r\n                        message:\"the password not the same\"       \r\n            }\r\n        },\r\n        image: {\r\n            type: String,\r\n            default:'https://yourteachingmentor.com/wp-content/uploads/2020/12/istockphoto-1223671392-612x612-1.jpg'\r\n        }\r\n        ,\r\n        passwordChangedAt: Date,\r\n    }, {\r\n        timestamps: true,\r\n    })\r\n    UserSchema.pre('save', async function (next) {\r\n    if (!this.isModified('password')) return next();\r\n        this.password = await bcrypt.hash(this.password, 12);\r\n        this.passwordConfirm = undefined;\r\n        next();\r\n    })\r\n    UserSchema.methods.correctPassword =async (password,userPassword) => {\r\n        return await bcrypt.compare(password,userPassword)    \r\n    }\r\n    UserSchema.methods.changedPasswordAfter = function (JWTTimeStamp) {\r\n  if (this.passwordChangedAt) {\r\n    const timePasswordChanged = parseInt(\r\n      this.passwordChangedAt.getTime() / 1000,\r\n      10\r\n    );\r\n    return JWTTimeStamp < timePasswordChanged;\r\n  }\r\n  return false;\r\n};\r\n    const User = mongoose.model('User', UserSchema);\r\n    module.exports=User"]}