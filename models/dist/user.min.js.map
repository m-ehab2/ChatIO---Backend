{"version":3,"sources":["user.js"],"names":["validator","require","mongoose","UserSchema","Schema","type","String","required","validate","isEmail","password","minlength","val","this","message","passwordChangedAt","pre","next","regeneratorRuntime","async","_context","prev","Date","abrupt","awrap","bcrypt","hash","sent","timestamps","passwordConfirm","undefined","stop","methods","correctPassword","userPassword","_context2","compare","changedPasswordAfter","JWTTimeStamp","parseInt","getTime","User","model","module","exports"],"mappings":"aAAI,IAAMA,UAAUC,QAAQ,aAClBC,SAAWD,QAAQ,YADnBD,OAAUC,QAAQ,YAGlBE,WAAa,IAAID,SAASE,OAAO,CAFjCF,KAAQ,CAING,KAAMC,OAHFC,SAAW,EAAA,EAAA,2BACjBJ,MAAU,CACNE,KAAAC,OACIA,SADJ,EAAA,EAAA,2BAEME,SAAO,CAAAR,UAAAS,QAAA,+BAEdC,SAAC,CACGJ,KADHA,OAEMC,SAAS,EAAA,EAAA,yBACTI,UAAEX,CAAAA,EAAUS,4CAExBC,gBAAU,CACAJ,KADAA,OAEEC,SAAS,EAAA,EAAA,gCACjBI,SAAa,CAbkBX,UAAA,SAAAY,GAenB,OAAAA,GAAAC,KAAAH,UAEKI,QAAA,8BAGLC,kBAAmBL,MAFrB,CAIEI,YAAQ,IAtBWX,WAAAa,IAAA,OAAA,SAAAC,GAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAH,MAAA,KAAA,EAAA,GAyBnCF,KAAAA,WAAmBO,YAzBgB,CAAAF,EAAAH,KAAA,EAAA,MAAA,OAAAG,EAAAG,OAAA,SAyBhBD,KAzBgB,KAAA,EAAA,OAAAF,EAAAH,KAAA,EAAAC,mBAAAM,MA0BpCC,OAAAC,KAAAb,KAAAH,SAAA,KA1BoC,KAAA,EA0BpCG,KAAAH,SA1BoCU,EAAAO,KA2BnCC,KAAUC,qBAAEC,EA3BhBb,IAAuC,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAW,SAAA,KAAAlB,QA6BhBV,WAAA6B,QAAAC,gBAAA,SAAAvB,EAAAwB,GAAA,OAAAhB,mBAAAC,MAAA,SAAAgB,GAAA,OAAA,OAAAA,EAAAd,KAAAc,EAAAlB,MAAA,KAAA,EAAA,OAAAkB,EAAAlB,KAAA,EAAAC,mBAAAM,MAAAC,OAAAW,QAAA1B,EAAAwB,IAAA,KAAA,EAAA,OAAAC,EAAAZ,OAAA,SAAAY,EAAAR,MAAA,KAAA,EAAA,IAAA,MAAA,OAAAQ,EAAAJ,WAAA5B,WAAA6B,QAAAK,qBAAA,SAAAC,GAAA,QAAAzB,KAAAE,mBAAAuB,EAAAC,SAAA1B,KAAAE,kBAAAyB,UAAA,IAAA,KAAA,IAAAC,KAAAvC,SAAAwC,MAAA,OAAAvC,YAoBvBwC,OAAOC,QAAQH","file":"user.min.js","sourcesContent":["    const validator=require('validator')\r\n    const mongoose = require('mongoose');\r\n    const bcrypt = require('bcryptjs'); \r\n    const UserSchema = new mongoose.Schema({\r\n        name: {\r\n            type: String,\r\n            required:[true,\"please enter your name\"]\r\n        },\r\n        email:{\r\n            type:String,\r\n            required: [true, \"please enter your email\"],\r\n            validate:[validator.isEmail,'Please Enter a Valid Email']\r\n        },\r\n        password: {\r\n            type: String,\r\n            required: [true, 'please enter Password'],\r\n            minlength:[8,\"please enter more than or equal 8 chars\"]\r\n        },\r\n        passwordConfirm:{\r\n            type: String,\r\n            required: [true, 'please confirm your password'],\r\n            validate: {\r\n            validator: function (val) {\r\n                        return val == this.password;\r\n                    },\r\n                        message:\"the password not the same\"       \r\n            }\r\n        },\r\n        passwordChangedAt: Date,\r\n    }, {\r\n        timestamps: true,\r\n    })\r\n    UserSchema.pre('save', async function (next) {\r\n    if (!this.isModified('password')) return next();\r\n        this.password = await bcrypt.hash(this.password, 12);\r\n        this.passwordConfirm = undefined;\r\n        next();\r\n    })\r\n    UserSchema.methods.correctPassword =async (password,userPassword) => {\r\n        return await bcrypt.compare(password,userPassword)    \r\n    }\r\n    UserSchema.methods.changedPasswordAfter = function (JWTTimeStamp) {\r\n  if (this.passwordChangedAt) {\r\n    const timePasswordChanged = parseInt(\r\n      this.passwordChangedAt.getTime() / 1000,\r\n      10\r\n    );\r\n    return JWTTimeStamp < timePasswordChanged;\r\n  }\r\n  return false;\r\n};\r\n    const User = mongoose.model('User', UserSchema);\r\n    module.exports=User"]}